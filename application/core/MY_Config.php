<?php (defined('BASEPATH')) OR exit('No direct script access allowed');

class MY_Config extends CI_Config
{
	function save_config($module)
	{
		$path = "modules";
		$config_data = $this->config;
		require "./application/{$path}/{$module}/config/config.php";
		foreach ($config as $key => $value)
		{
			if (isset($config_data[$key]))
			{
				$config[$key] = $config_data[$key];
			}
		}
		$ci =& get_instance();
		$ci->load->helper("file");
		write_file("./application/{$path}/{$module}/config/config.php", self::_parse_file_data($config));
	}

	private function _parse_file_data($data)
	{
		$file = '';
		$is_object = is_object($data);

		if ($is_object)
		{
			$data = serialize($data);
		}

		$file .= '<?php if ( ! defined("BASEPATH")) exit("No direct script access allowed");';
		$file .= "\n// @note - Do not edit this file directly. It is automatically generated. \n";

		if (is_array($data))
		{
			foreach ($data as $key => $value) {
				$file .= '$config' . "['$key'] = '$value';\n";
			}
		}
		else
		{
			$file .= '$config' . "['$var_name'] = ";
		}

		// Finalize File Contents and append a semicolon to PHP data
		if (!is_array($data))
		{
			$file .= $is_object ? 'unserialize(': '';
			$file .= var_export($data, TRUE) . ($is_object ? ');': ';');
		}
		return $file;
	}

	/**
	 * Load Config File
	 *
	 * @access	public
	 * @param	string	the config file name
	 * @param   boolean  if configuration values should be loaded into their own section
	 * @param   boolean  true if errors should just return false, false if an error message should be displayed
	 * @return	boolean	if the file was loaded correctly
	 */
	function load($file = '', $use_sections = FALSE, $fail_gracefully = FALSE)
	{
		$file = ($file == '') ? 'config' : str_replace('.php', '', $file);
		$found = FALSE;
		$loaded = FALSE;

		$check_locations = defined('ENVIRONMENT')
			? array(ENVIRONMENT.'/'.$file, $file)
			: array($file);
		log_message('debug', "loading {$file}");
		log_message('debug', print_r($this->_config_paths, true));
		foreach ($this->_config_paths as $path)
		{
			foreach ($check_locations as $location)
			{
				$file_path = $path.'config/'.$location.'.php';
				if (in_array($file_path, $this->is_loaded, TRUE))
				{
					log_message('debug', "loaded {$file_path}");
					$loaded = TRUE;
					continue 2;
				}

				if (file_exists($file_path))
				{
					log_message('debug', "not load {$file_path}");
					$found = TRUE;
					break;
				}
			}
			if ($file_path === "application/config/config.php")
			{
				continue;
			}
			if ($found === FALSE)
			{
				continue;
			}
			log_message('debug', "include file_path");
			include($file_path);

			if ( ! isset($config) OR ! is_array($config))
			{
				if ($fail_gracefully === TRUE)
				{
					return FALSE;
				}
				show_error('Your '.$file_path.' file does not appear to contain a valid configuration array.');
			}

			if ($use_sections === TRUE)
			{
				if (isset($this->config[$file]))
				{
					$this->config[$file] = array_merge($this->config[$file], $config);
				}
				else
				{
					$this->config[$file] = $config;
				}
			}
			else
			{
				$this->config = array_merge($this->config, $config);
			}

			$this->is_loaded[] = $file_path;
			unset($config);

			$loaded = TRUE;
			log_message('debug', 'Config file loaded: '.$file_path);
			break;
		}
		log_message('debug', print_r($this->config, TRUE));
		if ($loaded === FALSE)
		{
			if ($fail_gracefully === TRUE)
			{
				return FALSE;
			}
			show_error('The configuration file '.$file.'.php does not exist.');
		}
		return TRUE;
	}
}
